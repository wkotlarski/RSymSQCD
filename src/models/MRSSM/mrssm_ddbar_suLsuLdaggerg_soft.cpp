double MRSSM::matrixSoft_ddbar_suLsuLdaggerg(double Alfas, double s12, double th, double dS, double muR) const {
   const double b = sqrt(1. - 4.*pow<2>(MassSq)/s12);
   const double m1 = MassSq;
   const double lndS = std::log(dS);
   return (-0.0023148148148148147*pow<3>(Alfas)*(8.*pow<2>(m1) + (-2. + b*b)*s12 + b*b*s12*cos(2.*th))*(16.*s12*log((1. + b)/(1. - b)) + (-2.*pow<2>(m1) + s12 - 9.*b*s12)*pow<2>(log((1. + b)/(1. - b))) + 32.*b*s12*pow<2>(lndS) + 4.*lndS*(2.*pow<2>(m1)*log((1. + b)/(1. - b)) + s12*(log(-1. + 2./(1. + b)) + b*(-8. + 8.*log(s12/(muR*muR)) + 7.*log((-pow<2>(-1. + b*cos(th)))/(-1. + b*b))))) + 2.*((-2.*pow<2>(m1) + s12)*log(-1. + 2./(1. + b))*log(s12/(muR*muR)) + b*(-36. + s12*(log(pow<8>(pow<2>(muR)/s12)) + 4.*pow<2>(log(s12/(muR*muR))) + 7.*pow<2>(log((-1. + b)/(-1. + b*cos(th)))) - 7.*log((muR*muR)/s12)*log((-pow<2>(-1. + b*cos(th)))/(-1. + b*b)) + 2.*pow<2>(log((1. - b)/(1. + b*cos(th)))) + 2.*log((dS*dS*s12)/(muR*muR))*log((-pow<2>(1. + b*cos(th)))/(-1. + b*b))))) + 4.*((-2.*pow<2>(m1) + s12)*polylogarithm::Li2((2.*b)/(1. + b)) + b*s12*(2.*polylogarithm::Li2((b*(1. + cos(th)))/(-1. + b)) + 7.*polylogarithm::Li2((b - b*cos(th))/(-1. + b)) - 7.*polylogarithm::Li2((b*(1. + cos(th)))/(-1. + b*cos(th))) - 2.*polylogarithm::Li2((b*(-1. + cos(th)))/(1. + b*cos(th))))))*sin(th))/pow<3>(s12);
}
